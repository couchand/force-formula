// Generated by CoffeeScript 1.4.0
(function() {
  var Addition, Comparison, Concatenation, Conjunction, DecimalLiteral, Disjunction, Division, FunctionCall, InfixExpression, IntegerLiteral, Multiplication, Parens, Reference, StringLiteral, Subtraction,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InfixExpression = (function() {

    function InfixExpression(left, right, operator) {
      this.left = left;
      this.right = right;
      this.operator = operator;
    }

    return InfixExpression;

  })();

  Addition = (function(_super) {

    __extends(Addition, _super);

    function Addition() {
      return Addition.__super__.constructor.apply(this, arguments);
    }

    Addition.prototype.visit = function(visitor) {
      return visitor.visitAddition(this);
    };

    return Addition;

  })(InfixExpression);

  Subtraction = (function(_super) {

    __extends(Subtraction, _super);

    function Subtraction() {
      return Subtraction.__super__.constructor.apply(this, arguments);
    }

    Subtraction.prototype.visit = function(visitor) {
      return visitor.visitSubtraction(this);
    };

    return Subtraction;

  })(InfixExpression);

  Multiplication = (function(_super) {

    __extends(Multiplication, _super);

    function Multiplication() {
      return Multiplication.__super__.constructor.apply(this, arguments);
    }

    Multiplication.prototype.visit = function(visitor) {
      return visitor.visitMultiplication(this);
    };

    return Multiplication;

  })(InfixExpression);

  Division = (function(_super) {

    __extends(Division, _super);

    function Division() {
      return Division.__super__.constructor.apply(this, arguments);
    }

    Division.prototype.visit = function(visitor) {
      return visitor.visitDivision(this);
    };

    return Division;

  })(InfixExpression);

  Concatenation = (function(_super) {

    __extends(Concatenation, _super);

    function Concatenation() {
      return Concatenation.__super__.constructor.apply(this, arguments);
    }

    Concatenation.prototype.visit = function(visitor) {
      return visitor.visitConcatenation(this);
    };

    return Concatenation;

  })(InfixExpression);

  Conjunction = (function(_super) {

    __extends(Conjunction, _super);

    function Conjunction() {
      return Conjunction.__super__.constructor.apply(this, arguments);
    }

    Conjunction.prototype.visit = function(visitor) {
      return visitor.visitConjunction(this);
    };

    return Conjunction;

  })(InfixExpression);

  Disjunction = (function(_super) {

    __extends(Disjunction, _super);

    function Disjunction() {
      return Disjunction.__super__.constructor.apply(this, arguments);
    }

    Disjunction.prototype.visit = function(visitor) {
      return visitor.visitDisjunction(this);
    };

    return Disjunction;

  })(InfixExpression);

  Comparison = (function(_super) {

    __extends(Comparison, _super);

    function Comparison(comparator, a, b) {
      this.comparator = comparator;
      Comparison.__super__.constructor.call(this, a, b);
    }

    Comparison.prototype.visit = function(visitor) {
      return visitor.visitComparison(this);
    };

    return Comparison;

  })(InfixExpression);

  Parens = (function() {

    function Parens(formula) {
      this.formula = formula;
    }

    Parens.prototype.visit = function(visitor) {
      return visitor.visitParens(this);
    };

    return Parens;

  })();

  StringLiteral = (function() {

    function StringLiteral(value) {
      this.value = value;
    }

    StringLiteral.prototype.visit = function(visitor) {
      return visitor.visitStringLiteral(this);
    };

    return StringLiteral;

  })();

  DecimalLiteral = (function() {

    function DecimalLiteral(whole, part) {
      this.value = parseFloat(whole + '.' + part);
    }

    DecimalLiteral.prototype.visit = function(visitor) {
      return visitor.visitDecimalLiteral(this);
    };

    return DecimalLiteral;

  })();

  IntegerLiteral = (function() {

    function IntegerLiteral(val) {
      this.value = parseInt(val);
    }

    IntegerLiteral.prototype.visit = function(visitor) {
      return visitor.visitIntegerLiteral(this);
    };

    return IntegerLiteral;

  })();

  Reference = (function() {

    function Reference(names) {
      this.name = names.join('.');
    }

    Reference.prototype.visit = function(visitor) {
      return visitor.visitReference(this);
    };

    return Reference;

  })();

  FunctionCall = (function() {

    function FunctionCall(fn, parameters) {
      this.parameters = parameters;
      this.name = fn.toLowerCase();
    }

    FunctionCall.prototype.visit = function(visitor) {
      return visitor.visitFunctionCall(this);
    };

    return FunctionCall;

  })();

  module.exports = {
    Addition: Addition,
    Subtraction: Subtraction,
    Multiplication: Multiplication,
    Division: Division,
    Concatenation: Concatenation,
    Conjunction: Conjunction,
    Disjunction: Disjunction,
    Comparison: Comparison,
    Parens: Parens,
    StringLiteral: StringLiteral,
    IntegerLiteral: IntegerLiteral,
    DecimalLiteral: DecimalLiteral,
    Reference: Reference,
    FunctionCall: FunctionCall
  };

}).call(this);
