// Generated by CoffeeScript 1.4.0
(function() {
  var FormulaVisitor, TreeBuilder,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FormulaVisitor = (function() {

    function FormulaVisitor() {}

    FormulaVisitor.prototype.visitIntegerLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitDecimalLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitStringLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitParens = function(node) {
      return node.formula.visit(this);
    };

    FormulaVisitor.prototype.visitInfixExpression = function(node, fn) {
      var left, right;
      left = node.left.visit(this);
      right = node.right.visit(this);
      return fn(left, right);
    };

    return FormulaVisitor;

  })();

  TreeBuilder = (function(_super) {

    __extends(TreeBuilder, _super);

    function TreeBuilder() {
      return TreeBuilder.__super__.constructor.apply(this, arguments);
    }

    TreeBuilder.prototype.visitLiteral = function(node) {
      return {
        name: node.value
      };
    };

    TreeBuilder.prototype.visitStringLiteral = function(node) {
      return {
        name: "'" + node.value + "'"
      };
    };

    TreeBuilder.prototype.visitReference = function(node) {
      return {
        name: node.name
      };
    };

    TreeBuilder.prototype.visitParens = function(node) {
      return {
        name: '(_)',
        children: [node.formula.visit(this)]
      };
    };

    TreeBuilder.prototype.visitInfixExpression = function(node) {
      return TreeBuilder.__super__.visitInfixExpression.call(this, node, function(a, b) {
        return {
          name: node.operator,
          children: [a, b]
        };
      });
    };

    TreeBuilder.prototype.visitFunctionCall = function(node) {
      var children, i, param, _i, _ref;
      if (node.name === 'case') {
        children = [
          {
            name: "on",
            children: [node.parameters[0].visit(this)]
          }
        ];
        for (i = _i = 1, _ref = node.parameters.length - 2; _i <= _ref; i = _i += 2) {
          children.push({
            name: "when",
            children: [node.parameters[i].visit(this), node.parameters[i + 1].visit(this)]
          });
        }
        children.push({
          name: "else",
          children: [node.parameters[node.parameters.length - 1].visit(this)]
        });
      } else {
        children = (function() {
          var _j, _len, _ref1, _results;
          _ref1 = node.parameters;
          _results = [];
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            param = _ref1[_j];
            _results.push(param.visit(this));
          }
          return _results;
        }).call(this);
      }
      return {
        name: "" + node.name + "()",
        children: children
      };
    };

    return TreeBuilder;

  })(FormulaVisitor);

  module.exports = function(formula) {
    return formula.visit(new TreeBuilder());
  };

}).call(this);
