// Generated by CoffeeScript 1.4.0
(function() {
  var ComplexityCalculator, FormulaVisitor, functions, sum,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FormulaVisitor = (function() {

    function FormulaVisitor() {}

    FormulaVisitor.prototype.visitIntegerLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitDecimalLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitStringLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitParens = function(node) {
      return node.formula.visit(this);
    };

    FormulaVisitor.prototype.visitInfixExpression = function(node, fn) {
      var left, right;
      left = node.left.visit(this);
      right = node.right.visit(this);
      return fn(left, right);
    };

    return FormulaVisitor;

  })();

  sum = function(a) {
    var i, s, _i, _len;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      i = a[_i];
      s = (s || 0) + i;
    }
    return s;
  };

  functions = {
    "if": function(params) {
      return 1 + sum(params);
    },
    "case": function(params) {
      return Math.round((params.length - 1) / 2) + sum(params);
    }
  };

  ComplexityCalculator = (function(_super) {

    __extends(ComplexityCalculator, _super);

    function ComplexityCalculator(options) {
      this.options = options;
    }

    ComplexityCalculator.prototype.visitLiteral = function(node) {
      return 0;
    };

    ComplexityCalculator.prototype.visitReference = function(node) {
      return 0;
    };

    ComplexityCalculator.prototype.visitInfixExpression = function(node) {
      return ComplexityCalculator.__super__.visitInfixExpression.call(this, node, function(a, b) {
        return a + b;
      });
    };

    ComplexityCalculator.prototype.visitFunctionCall = function(node) {
      var param, params;
      params = (function() {
        var _i, _len, _ref, _results;
        _ref = node.parameters;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push(param.visit(this));
        }
        return _results;
      }).call(this);
      if (functions[node.name] != null) {
        return functions[node.name](params);
      } else {
        return sum(params);
      }
    };

    return ComplexityCalculator;

  })(FormulaVisitor);

  module.exports = function(formula, options) {
    return formula.visit(new ComplexityCalculator(options));
  };

}).call(this);
