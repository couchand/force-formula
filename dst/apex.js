// Generated by CoffeeScript 1.4.0
(function() {
  var ApexCompiler, FormulaVisitor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FormulaVisitor = require('./visitor');

  ApexCompiler = (function(_super) {

    __extends(ApexCompiler, _super);

    function ApexCompiler(context) {
      this.context = context;
    }

    ApexCompiler.prototype.visitLiteral = function(node) {
      return node.value;
    };

    ApexCompiler.prototype.visitStringLiteral = function(node) {
      return "'" + node.value + "'";
    };

    ApexCompiler.prototype.visitReference = function(node) {
      if (this.context && node.name[0] !== '$') {
        return "" + this.context + "." + node.name;
      } else {
        return node.name;
      }
    };

    ApexCompiler.prototype.visitParens = function(node) {
      return "( " + (node.formula.visit(this)) + " )";
    };

    ApexCompiler.prototype.visitInfixExpression = function(node) {
      return ApexCompiler.__super__.visitInfixExpression.call(this, node, function(a, b) {
        return "" + a + " " + node.operator + " " + b;
      });
    };

    ApexCompiler.prototype.visitFunctionCall = function(node) {
      var param, params;
      params = (function() {
        var _i, _len, _ref, _results;
        _ref = node.parameters;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push(param.visit(this));
        }
        return _results;
      }).call(this);
      return "" + node.name + "(" + (params.join(', ')) + ")";
    };

    return ApexCompiler;

  })(FormulaVisitor);

  module.exports = function(formula, context) {
    return formula.visit(new ApexCompiler(context));
  };

}).call(this);
