// Generated by CoffeeScript 1.4.0
(function() {
  var FormulaVisitor, Printer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FormulaVisitor = (function() {

    function FormulaVisitor() {}

    FormulaVisitor.prototype.visitIntegerLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitDecimalLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitStringLiteral = function(node) {
      return this.visitLiteral(node);
    };

    FormulaVisitor.prototype.visitParens = function(node) {
      return node.formula.visit(this);
    };

    FormulaVisitor.prototype.visitInfixExpression = function(node, fn) {
      var left, right;
      left = node.left.visit(this);
      right = node.right.visit(this);
      return fn(left, right);
    };

    return FormulaVisitor;

  })();

  module.exports = FormulaVisitor;

  Printer = (function(_super) {

    __extends(Printer, _super);

    function Printer(indent, tab) {
      var _ref, _ref1;
      this.indent = indent;
      this.tab = tab;
      if ((_ref = this.indent) == null) {
        this.indent = 0;
      }
      if ((_ref1 = this.tab) == null) {
        this.tab = '    ';
      }
    }

    Printer.prototype.prefix = function() {
      return ((function() {
        var _i, _ref, _results;
        _results = [];
        for (_i = 0, _ref = this.indent; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
          _results.push(this.tab);
        }
        return _results;
      }).call(this)).join('');
    };

    Printer.prototype.visitLiteral = function(node) {
      return node.value;
    };

    Printer.prototype.visitStringLiteral = function(node) {
      return "'" + node.value + "'";
    };

    Printer.prototype.visitReference = function(node) {
      return node.name;
    };

    Printer.prototype.visitParens = function(node) {
      return "( " + (node.formula.visit(this)) + " )";
    };

    Printer.prototype.visitAddition = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " + " + b;
      });
    };

    Printer.prototype.visitSubtraction = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " - " + b;
      });
    };

    Printer.prototype.visitMultiplication = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " * " + b;
      });
    };

    Printer.prototype.visitDivision = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " / " + b;
      });
    };

    Printer.prototype.visitExponentiation = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " ^ " + b;
      });
    };

    Printer.prototype.visitConcatenation = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " & " + b;
      });
    };

    Printer.prototype.visitConjunction = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " && " + b;
      });
    };

    Printer.prototype.visitDisjunction = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " || " + b;
      });
    };

    Printer.prototype.visitComparison = function(node) {
      return this.visitInfixExpression(node, function(a, b) {
        return "" + a + " " + node.comparator + " " + b;
      });
    };

    Printer.prototype.visitFunctionCall = function(node) {
      var param, params;
      if (node.parameters.length === 0) {
        return "" + node.name + "()";
      }
      this.indent += 1;
      params = (function() {
        var _i, _len, _ref, _results;
        _ref = node.parameters;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          _results.push("" + (this.prefix()) + (param.visit(this)));
        }
        return _results;
      }).call(this);
      this.indent -= 1;
      return "" + node.name + "(\n" + (params.join(',\n')) + "\n" + (this.prefix()) + ")";
    };

    return Printer;

  })(FormulaVisitor);

  module.exports = function(formula, indent, tab) {
    return formula.visit(new Printer(indent, tab));
  };

}).call(this);
